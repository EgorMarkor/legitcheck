#!/usr/bin/env python3
"""
Telegram Login Bot: deep-link /start login_<token>
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ backend, –ø–æ–º–µ—á–∞–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º.
–†–∞–±–æ—Ç–∞–µ—Ç —Å backend endpoint: POST /internal/telegram/confirm/
JSON: { token: <hex>, telegram_id: <int> }
–û—Ç–≤–µ—Ç—ã backend:
  {"ok": true, "username": "..."}                    # —É—Å–ø–µ—Ö
  {"ok": false, "reason": "expired|not_found|used|forbidden"}  # –æ—à–∏–±–∫–∞
"""

import os
import re
import logging
import asyncio
from dataclasses import dataclass
import json
import requests
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

try:
    # Optional: load .env
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# --- Config ----------------------------------------------------------------

BOT_TOKEN: str = os.environ.get(
    "BOT_TOKEN",
    "7620197633:AAHqBbPgVEtloxy6we7YyvMU7eWK9-hSyrU",
)
BACKEND_BASE_URL: str = "https://legitcheck.one/"
BOT_BACKEND_SECRET: Optional[str] = os.environ.get("BOT_BACKEND_SECRET") or None

if not BACKEND_BASE_URL:
    raise RuntimeError("BACKEND_BASE_URL env empty")


TOKEN_PREFIX = "login_"
TOKEN_RE = re.compile(rf"^{TOKEN_PREFIX}([a-f0-9]{16})$")  # 16 hex chars token

CONFIRM_ENDPOINT = f"{BACKEND_BASE_URL}/internal/telegram/confirm/"

# --- Exceptions -------------------------------------------------------------

class BackendError(Exception):
    pass

# --- HTTP helper ------------------------------------------------------------

def backend_confirm(token_hex: str, telegram_id: int) -> dict:
    """POST confirm to backend. Raises BackendError on any failure."""
    payload = {"token": token_hex, "telegram_id": telegram_id}
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "TGLoginBot/1.0"
    }
    if BOT_BACKEND_SECRET:
        headers["X-Bot-Secret"] = BOT_BACKEND_SECRET
    try:
        r = requests.post(CONFIRM_ENDPOINT, json=payload, headers=headers, timeout=6)
    except requests.RequestException as e:
        raise BackendError(f"net: {e}") from e

    try:
        data = r.json()
    except ValueError:
        raise BackendError(f"bad-json status={r.status_code} body={r.text[:200]!r}")

    if r.status_code != 200:
        raise BackendError(f"http {r.status_code} body={data}")
    return data

# --- Handlers ---------------------------------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start [login_<token>] ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–æ–∫–µ–Ω, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É.
    """
    user = update.effective_user
    args = context.args

    if args:
        raw = args[0]
        m = TOKEN_RE.match(raw)
        if m:
            token_hex = m.group(1)
            await confirm_token_flow(update, token_hex)
            return

    # /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîê –ö–∞–∫ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ", url=f"{BACKEND_BASE_URL}/pc/telegram/help/")]
    ])
    text = (
        "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É (–∫–Ω–æ–ø–∫—É), —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ.\n\n"
        "–ê–ª–≥–æ—Ä–∏—Ç–º:\n"
        "1. –ù–∞ —Å–∞–π—Ç–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram¬ª.\n"
        "2. –û—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç ‚Äî –ø–æ—è–≤–∏—Ç—Å—è /start login_... (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ START).\n"
        "3. –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂—É —Ç–æ–∫–µ–Ω.\n"
        "4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è."
    )
    await safe_reply(update, text, reply_markup=keyboard)

async def confirm_token_flow(update: Update, token_hex: str):
    msg = update.effective_message
    user = update.effective_user

    await safe_reply(update, f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω‚Ä¶")

    try:
        data = await asyncio.to_thread(backend_confirm, token_hex, user.id)
    except BackendError as e:
        log.warning("confirm error token=%s.. tg=%s: %s", token_hex[:8], user.id, e)
        await safe_reply(update, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    if not data.get("ok"):
        reason = data.get("reason")
        msg_map = {
            "expired": "‚åõ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ.",
            "not_found": "‚ùì –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.",
            "used": "üîÅ –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.",
            "forbidden": "üö´ –¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π."
        }
        txt = msg_map.get(reason, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ–∫–µ–Ω.")
        await safe_reply(update, txt)
        return

    username = data.get("username")
    extra = f"\n–°–∞–π—Ç-–ø—Ä–æ—Ñ–∏–ª—å: *{username}*" if username else ""
    await safe_reply(
        update,
        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞." + extra +
        "\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä ‚Äî –ª–æ–≥–∏–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        parse_mode="Markdown"
    )

async def unlink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π unlink –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ confirm (–æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint)
    await safe_reply(update, "‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤—è–∑–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ ‚Äî —è –¥–∞–º –∫–æ–¥.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply(update,
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –ù–∞ —Å–∞–π—Ç–µ ‚Äî ¬´–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram¬ª.\n"
        "2. –û—Ç–∫—Ä—ã–ª—Å—è —á–∞—Ç —Å–æ –º–Ω–æ–π ‚Üí /start login_<token>.\n"
        "3. –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é.\n"
        "4. –°–∞–π—Ç —É–≤–∏–¥–∏—Ç –≤—Ö–æ–¥ (poll) –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç.\n\n"
        "–ï—Å–ª–∏ –¥–æ–ª–≥–æ –≤–∏—Å–∏—Ç ¬´–û–∂–∏–¥–∞–Ω–∏–µ¬ª ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω."
    )

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text.startswith("/start login_"):
        await safe_reply(update, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Ç–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ.")
    else:
        await safe_reply(update, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É /start login_<token> –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# --- Utility reply wrapper --------------------------------------------------

async def safe_reply(update: Update, text: str, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏–±–æ reply, –ª–∏–±–æ sendMessage (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ).
    """
    msg = update.effective_message
    try:
        if msg:
            await msg.reply_text(text, **kwargs)
        else:
            await update.effective_chat.send_message(text, **kwargs)
    except Exception as e:
        log.debug("reply failed: %s", e)

# --- Main -------------------------------------------------------------------

def main():
    log.info(
        "Starting bot (secret=%s)...",
        "set" if BOT_BACKEND_SECRET else "NOT SET (INSECURE MODE)"
    )
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("unlink", unlink))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
