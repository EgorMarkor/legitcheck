import os
import django
from aiogram import Bot, Dispatcher, executor, types
from asgiref.sync import sync_to_async
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django ---
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "legitcheck.settings")
django.setup()

from webapp.models import Verdict

API_TOKEN = "7620197633:AAHqBbPgVEtloxy6we7YyvMU7eWK9-hSyrU"
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–º—É Verdict –ø–æ –∫–æ–¥—É + –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
@sync_to_async
def fetch_verdict_by_code(code):
    try:
        v = Verdict.objects.prefetch_related('photos').get(code__iexact=code)
    except Verdict.DoesNotExist:
        return None, None

    first = v.photos.first()
    photo_path = first.image.path if first else None
    return v, photo_path


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deep link /start=<code>:
    - –µ—Å–ª–∏ code –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ—Ç Verdict –ø–æ –Ω–µ–º—É –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    - –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π
    """
    args = message.get_args().strip()
    if not args:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤–∏–¥–∞ `https://t.me/YourBot?start=<code>`.")
        return

    code = args
    webapp_url = f"https://legitcheck.one/verdict?code={code}"
    button = InlineKeyboardButton(
        text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=webapp_url)
    )
    markup = InlineKeyboardMarkup().add(button)
    v, photo_path = await fetch_verdict_by_code(code)
    if not v:
        await message.reply(f"‚ùå –í–µ—Ä–¥–∏–∫—Ç —Å –∫–æ–¥–æ–º <b>{code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    caption = (
        f"<b>–ö–æ–¥:</b> {v.code}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–µ—â–∏:</b> {v.get_category_display()}\n"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {v.brand}\n"
        f"<b>–ú–æ–¥–µ–ª—å:</b> {v.item_model}\n"
        f"<b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {v.get_status_display()}\n"
        f"<b>–î–∞—Ç–∞:</b> {v.created_at:%Y-%m-%d %H:%M}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {v.comment}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {v.comment_from_user}"
    )

    if photo_path and os.path.exists(photo_path):
        photo = types.InputFile(photo_path)
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=caption,
            reply_markup=markup
        )
    else:
        await message.answer(caption)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
